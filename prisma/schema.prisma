generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Job {
  id               String         @id @default(cuid())
  slug             String         @unique
  title            String         @db.VarChar(255)
  type             String         @db.VarChar(255)
  locationType     String         @db.VarChar(255)
  location         String?        @db.VarChar(255)
  description      String?        @db.Text
  salary           Int
  companyName      String         @db.VarChar(255)
  applicationEmail String?        @db.VarChar(255)
  applicationUrl   String?        @db.VarChar(255)
  companyLogoUrl   String?        @db.VarChar(255)
  approved         Boolean        @default(false)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  userId           String         @db.VarChar(255)
  postedBy         User           @relation(name: "JobPostedBy", fields: [userId], references: [id])
  applicants       JobApplicant[]

  @@index([userId])
}

enum UserRole {
  EMPLOYER
  JOBSEEKER
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id               String             @id @default(cuid())
  name             String?
  email            String            @unique
  emailVerified    DateTime?
  image            String?
  hashedPassword   String?
  userRole         UserRole           @default(JOBSEEKER)
  accounts         Account[]
  sessions         Session[]
  jobSeekerProfile JobSeekerProfile[]
  employerProfile  EmployerProfile[]
  postedJobs       Job[]              @relation(name: "JobPostedBy")
  appliedJobs      JobApplicant[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model JobSeekerProfile {
  id     String @id @default(cuid())
  // Add job seeker-specific attributes (e.g., resume, job preferences, etc.)
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([id])
  @@index([userId])
}

model EmployerProfile {
  id     String @id @default(cuid())
  // Add employer-specific attributes (e.g., company details, job postings, etc.)
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@unique([id])
  @@index([userId])
}

model JobApplicant {
  jobId  String
  userId String

  job  Job  @relation(fields: [jobId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@id([jobId, userId])
  @@index([jobId])
  @@index([userId])
}
